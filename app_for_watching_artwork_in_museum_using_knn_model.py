# -*- coding: utf-8 -*-
"""App_for_watching_artwork_in_museum_using_KNN_model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xVALCs5G-E6mtLYtWsnGW_IQK7osHiwp

## **Import necessary libraries**
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns

"""## **1. Load Dataset**

"""

df = pd.read_csv('FP_DATASET_Fullcut2.csv')

"""## **2. Check the initial data overview**"""

df

print(df.info())

print(df.describe())

"""## **3. Handle missing values**"""

# Check for missing values
print(df.isnull().sum())

# Replace missing values (example: using mean)
df.fillna(df.mean(), inplace=True)

"""## **4. Separate features and target variable**"""

X = df.drop('TARGET', axis=1)
y = df['TARGET']

X

y

"""## **5. Split the data**"""

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

X_train

X_test

y_train

y_test

"""## **6. Create KNN model**"""

model = KNeighborsClassifier(n_neighbors=3)
model.fit(X_train, y_train)

"""## **7. Make predictions**"""

y_pred = model.predict(X_test)

"""## **8. Evaluate the model**"""

accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy * 100:.2f}%')

# Display Classification Report
print(classification_report(y_test, y_pred))

# Display Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10,7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=np.unique(y), yticklabels=np.unique(y))
plt.ylabel('Actual')
plt.xlabel('Predicted')
plt.title('Confusion Matrix')
plt.show()

"""## **9. Test different values of K**"""

accuracy_list = []
k_values = range(1, 21)

for k in k_values:
    model = KNeighborsClassifier(n_neighbors=k)
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    accuracy_list.append(accuracy_score(y_test, y_pred))

# Display the accuracy vs K Value graph
plt.figure(figsize=(10, 6))
plt.plot(k_values, [acc * 100 for acc in accuracy_list], marker='o')
plt.xticks(k_values)
plt.xlabel('Number of Neighbors K')
plt.ylabel('Accuracy (%)')
plt.title('Accuracy vs K Value')
plt.show()